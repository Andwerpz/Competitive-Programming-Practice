#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<bool> vb;
typedef vector<ld> vd;
typedef vector<vector<int>> vvi;
typedef vector<vector<ll>> vvl;
typedef vector<vector<bool>> vvb;
typedef vector<vector<ld>> vvd;
// typedef __int128 lll;
// typedef __float128 lld;

//AtCoder - ARC140D

//big idea: instead of considering how many structures have a certain amount of substructures, identify
//a specific substructure and count the number of structures that contain that substructure. 

//First, what does the resulting graph generated by this process look like. Since each node has exactly
//one outgoing edge, this is exactly a functional graph. One relevant fact about functional graphs is
//that each component has exactly 1 cycle, so it might be useful to start by considering how to count
//cycles, as that will give us the count of components. 

//Let's consider a cycle that already exists due to a_i != -1. These cycles will appear in every X, so
//for each preexisting cycle, we can add N^M to the answer, where M is the number of a_i = -1. 

//Any other cycle will be created by setting some a_i = -1. All other preexisting components will be
//some rooted tree, with the root being a_i = -1. If we pick K of these components, with sizes
//B_1, B_2, ..., B_K, and count the number of ways to arrange them into a cycle, we can construct the
//cycle B_1 * B_2 * ... * B_K ways, and then order the components (K - 1)! ways. Then, the other edges 
//can be assigned N^(M - K) ways. 

//Using dp, we can compute the sum over all selection of length K cycles for K in range [1, N] in N^2. 
//Actually, we can use NTT to solve this in O(n * log(n)^2), but it's unnecessary for this problem. 

struct mint;
typedef vector<mint> vm;
typedef vector<vector<mint>> vvm;
typedef pair<mint, mint> pmm;

const ll mod = 998244353;
struct mint {
    ll val; //this should always be in range [0, mod)
    mint(ll _val = 0) {val = _val; if(val < 0) val = mod + (val % mod);}
    mint(const mint& other) {val = other.val;}
    bool operator ==(const mint& other) const {return val == other.val;}
    bool operator ==(ll other) const {return val == other;}
    bool operator !=(const mint& other) const {return val != other.val;}
    bool operator !=(ll other) const {return val != other;}
    bool operator >(const mint& other) const {return val > other.val;}
    bool operator >(ll other) const {return val > other;}
    bool operator <(const mint& other) const {return val < other.val;}
    bool operator <(ll other) const {return val < other;}
    mint& operator =(const mint& other) {val = other.val; return *this;}
    mint& operator =(ll other) {val = other; return *this;}
    mint operator +(const mint& other) const {ll ret = val + other.val; while(ret >= mod) {ret -= mod;} return mint(ret);}
    mint operator +(ll other) const {return *this + mint(other);}
    mint& operator +=(const mint& other) {*this = *this + other; return *this;}
    mint& operator +=(ll other) {*this = *this + other; return *this;}
    mint operator -(const mint& other) const {ll ret = val - other.val; while(ret < 0) {ret += mod;} return mint(ret);}
    mint operator -(ll other) const {return *this - mint(other);}
    mint& operator -=(const mint& other) {*this = *this - other; return *this;}
    mint& operator -=(ll other) {*this = *this - other; return *this;}
    mint operator *(const mint& other) const {return mint((val * other.val) % mod);}
    mint operator *(ll other) const {return *this * mint(other);}
    mint& operator *=(const mint& other) {*this = *this * other; return *this;}
    mint& operator *=(ll other) {*this = *this * other; return *this;}
    mint operator /(const mint& other) const {return mint((val / other.val) % mod);}
    mint operator /(ll other) const {return *this / mint(other);}
    mint& operator /=(const mint& other) {*this = *this / other; return *this;}
    mint& operator /=(ll other) {*this = *this / other; return *this;}
    mint operator %(const mint& other) const {return mint(val % other.val);}
    mint operator %(ll other) const {return *this % mint(other);}
    mint& operator %=(const mint& other) {*this = *this % other; return *this;}
    mint& operator %=(ll other) {*this = *this % other; return *this;}

    //don't forget about fermat's little theorem, 
    //a^(m-1) % m = 1. This means that a^(p % m) % m != a^(p) % m, rather a^(p % (m-1)) % m = a^(p) % m. 
    mint pow(const mint& other) const {
        mint ans(1), p(val);
        ll b = other.val;
        while(b != 0) {if(b % 2 == 1) {ans *= p;} p *= p; b /= 2;}
        return ans;
    }
    mint pow(ll other) const {return this->pow(mint(other));}

    //returns X such that A = (B * X) % mod
    mint inv_divide(const mint& other) const {
        return *this * other.pow(mod - 2);
    }

    friend std::ostream& operator<<(std::ostream& os, const mint& m) {os << m.val; return os;}
    friend std::istream& operator>>(std::istream& is, mint& m) {is >> m.val; return is;}
    operator size_t() const {return val;}
};
bool operator ==(ll a, const mint& b) {return mint(a) == b;}
bool operator !=(ll a, const mint& b) {return mint(a) != b;}
bool operator >(ll a, const mint& b) {return mint(a) > b;}
bool operator <(ll a, const mint& b) {return mint(a) < b;}
mint operator +(ll a, const mint& b) {return mint(a) + b;}
mint operator -(ll a, const mint& b) {return mint(a) - b;}
mint operator *(ll a, const mint& b) {return mint(a) * b;}
mint operator /(ll a, const mint& b) {return mint(a) / b;}
mint operator %(ll a, const mint& b) {return mint(a) % b;}

vector<mint> fac;
void fac_init(int N) {
    fac = vector<mint>(N);
    fac[0] = 1;
    for(int i = 1; i < N; i++){
        fac[i] = fac[i - 1] * i;
    }
}

//n >= k
map<pair<mint, mint>, mint> nckdp;
mint nck(mint n, mint k) {
    if(nckdp.find({n, k}) != nckdp.end()) {
        return nckdp.find({n, k}) -> second;
    }
    mint ans = fac[n].inv_divide(fac[k] * fac[n - k]);
    nckdp.insert({{n, k}, ans});
    return ans;
}

//stirling number of the first kind (unsigned)
//s1[n][k] = number of permutations of length n with exactly k cycles
//s1[n + 1][k] = n * s1[n][k] + s1[n][k - 1]
vvm s1;
void init_s1(int N) {
    s1 = vvm(N + 1, vm(N + 1, 0));
    s1[1][1] = 1;
    for(int n = 2; n <= N; n++){
        for(int k = 1; k <= n; k++){
            if(k != 1) s1[n][k] += s1[n - 1][k - 1];
            s1[n][k] += (n - 1) * s1[n - 1][k];
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    
    init_s1(2005);
    fac_init(2005);
    int n;
    cin >> n;
    vi a(n), id(n, -1);
    for(int i = 0; i < n; i++) {
        cin >> a[i]; 
        if(a[i] != -1) a[i] --;
    }
    vm x(0);
    vb v(n, false), is_cycle(0);
    int m = 0;
    mint ans = 0;
    for(int i = 0; i < n; i++){
        if(v[i]) continue;
        int ptr = i, cnt = 0, cid = -1;
        while(ptr != -1 && !v[ptr]) v[ptr] = true, cnt ++, cid = id[ptr] != -1? id[ptr] : -1, ptr = a[ptr];
        if(ptr != -1 && id[ptr] != -1) cid = id[ptr];
        if(cid == -1) cid = x.size(), is_cycle.push_back(ptr != -1), x.push_back(0), m += ptr == -1;
        x[cid] += cnt, ptr = i;
        while(ptr != -1 && id[ptr] == -1) id[ptr] = cid, ptr = a[ptr];
    } 
    vm tmpx(0);
    for(int i = 0; i < x.size(); i++){
        if(is_cycle[i]) ans += mint(n).pow(m);
        else tmpx.push_back(x[i]);
    }
    x = tmpx;
    //dp[i][j] = sum of product sequences considering first i elements and taking j of them
    vvm dp(m + 1, vm(m + 1, 0));
    dp[0][0] = 1;
    for(int i = 0; i < m; i++){
        for(int j = 0; j <= m; j++){
            dp[i + 1][j] += dp[i][j];   //don't take
            if(j != m) dp[i + 1][j + 1] += dp[i][j] * x[i]; //take
        }
    }
    for(int i = 1; i <= m; i++){
        ans += dp[m][i] * mint(n).pow(m - i) * fac[i - 1];
    }
    cout << ans << "\n";
    
    return 0;
}