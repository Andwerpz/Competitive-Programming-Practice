#include <bits/stdc++.h>
typedef long long ll;
typedef __int128 lll;
typedef long double ld;
using namespace std;

//Codeforces - 1895D

//holy moly discussion

// ok, first keep in mind the additional constraint they give you; it's always possible to construct a sequence b from the given a
// as we discussed before, the first element of b will determine all other elements
// with these two combined, we can show that with any starting element for b, there will be no duplicates in b
// because if there are, then it's impossible to construct b
// with these properties in mind, we can see that if n is of the form 2^k, then we can just choose b[0] = 0, and that will always work
// if n is not of the form 2^k, then our problem is that there might be one or more elements in b that will go over n.
// to deal with this case, we can just count the expected number of each bit; 1, 2, 4, etc... that we should see in b, and compare it to the sequence generated by setting b[0] = 0.
// if, for example, the number of 1 bits in b is equal to the expected amount, then we should just leave the 1 bit alone in b[0]. However, if they are not equal, then we should flip the 1 bit of b[0].

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n;
    cin >> n;
    vector<int> a(n - 1);
    for(int i = 0; i < n - 1; i++){
        cin >> a[i];
    }
    int start = 0;
    vector<pair<int, int>> bit_cnt(30, {0, 0}); //{on, off}
    for(int i = 0; i < n; i++){
        int tmp = i;
        for(int j = 0; j < 30; j++){
            bit_cnt[j].first += (tmp >> j) & 1;
            bit_cnt[j].second += ((tmp >> j) & 1) == 0;
        }
    }
    int ptr = start;
    vector<pair<int, int>> bit_cnt_2(30, {0, 1});
    for(int i = 0; i < n - 1; i++){
        ptr = ptr ^ a[i];
        int tmp = ptr;
        for(int j = 0; j < 30; j++){
            bit_cnt_2[j].first += (tmp >> j) & 1;
            bit_cnt_2[j].second += ((tmp >> j) & 1) == 0;
        }
    }
    for(int i = 0; i < 30; i++){
        if(bit_cnt[i] != bit_cnt_2[i]) {
            start = start ^ (1 << i);
        }
    }
    cout << start << " ";
    for(int i = 0; i < n - 1; i++){
        start = start ^ a[i];
        cout << start << " ";
    }
    cout << "\n";
    
    return 0;
}
