//package fortunetelling;

import java.util.*;
import java.io.*;

public class fortunetelling {
	public static void main(String[] args) throws IOException {
		
		//1634B
		
		//notice that the only bit between d and d + 3 that is guaranteed to change is the 2^0 bit. 
		
		//define a new number 'a', a % 2 == 1. (the 2^0 bit of 'a' = 1). 
		
		//notice that no matter if we add or xor 'a' to our current number, the 2^0 bit will always change. 
		//we can count exactly how many numbers there are in the array with their 2^0 bit == 1, and we can determine
		//the final parity of d, and d + 3. 
		
		//given this, we know that it is impossible for a number generated by d to also be generated by d + 3, 
		//so if the final parity of d == final parity of y, then d is generated by y, else, it is generated by d + 3. 
		
		BufferedReader fin = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(fin.readLine());
		StringBuilder fout = new StringBuilder();
		while(t-- > 0) {
			StringTokenizer st = new StringTokenizer(fin.readLine());
			int n = Integer.parseInt(st.nextToken());
			int x = Integer.parseInt(st.nextToken());
			long y = Long.parseLong(st.nextToken());
			int[] nums = new int[n];
			st = new StringTokenizer(fin.readLine());
			for(int i = 0; i < n; i++) {
				nums[i] = Integer.parseInt(st.nextToken());
				if(nums[i] % 2 == 1) {
					x += 1;
				}
			}
			fout.append(x % 2 == y % 2? "Alice\n" : "Bob\n");
		}
		System.out.print(fout);
	}
}
