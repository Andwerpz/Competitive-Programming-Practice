//package reschedulingtheexam;

import java.util.*;
import java.io.*;

public class reschedulingtheexam {
	public static void main(String[] args) throws IOException {
		
		//1650E
		
		//you can the max minimum value generated by moving each test in O(1) time.
		
		//a segment is the space between two tests. The segment between the last test, and the right bound is considered differently.
		
		//record the three smallest segments, and the maximum segment. Also record the size of the rightmost segment.
		
		//first, generate the size of the new segment created by removing said test. 
		//test if the segments that were combined as a result of removing the test were the minimum segments. 
		
		//also compute the size of the new segments created as a result of adding the test back. Always place the test back
		//into the middle of the largest segment, or the very right side of the right segment. 
		
		//take the minimum of all these segments, minus the minimum segments if they were removed
		//when initially taking out the test. 
		
		//the answer is the maximum out of all the minimum segments. 
		
		BufferedReader fin = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(fin.readLine());
		StringBuilder fout = new StringBuilder();
		while(t-- > 0) {
			fin.readLine();
			StringTokenizer st = new StringTokenizer(fin.readLine());
			int n = Integer.parseInt(st.nextToken());
			int d = Integer.parseInt(st.nextToken());
			ArrayList<Integer> segments = new ArrayList<Integer>();
			int[] nums = new int[n];
			st = new StringTokenizer(fin.readLine());
			for(int i = 0; i < n; i++) {
				nums[i] = Integer.parseInt(st.nextToken());
			}
			int right = d - nums[n - 1];
			for(int i = 0; i < n; i++) {
				segments.add(nums[i] - (i == 0? 1 : nums[i - 1] + 1));
			}
			ArrayList<Integer> sorted = new ArrayList<Integer>();
			sorted.addAll(segments);
			sorted.sort((a, b) -> Integer.compare(a, b));
			int ans = sorted.get(0);
			for(int i = 0; i < n; i++) {
				int r = right;
				if(i == n - 1) {
					r += segments.get(segments.size() - 1) + 1;
				}
				int rLeft = segments.get(i);	//segment to the left of the test
				int rRight = i == n - 1? right : segments.get(i + 1);	//segment to the right of the test
				int max = Math.max(sorted.get(sorted.size() - 1), rLeft + rRight + 1);
				int maxSeg = sorted.get(sorted.size() - 1);
				int totalSeg = rLeft + rRight + 1;
				int created = Math.max(r - 1, (max - 1) / 2);
				ArrayList<Integer> temp = new ArrayList<Integer>();
				for(int j = 0; j < Math.min(3, sorted.size()); j++) {
					temp.add(sorted.get(j));
				}
				//System.out.println(temp + " " + created + " " + rLeft + " " + rRight);
				if(temp.contains(rLeft)) {
					temp.remove((Integer) rLeft);
				}
				if(temp.contains(rRight) && i != n - 1) {
					temp.remove((Integer) rRight);
				}
				if(((totalSeg - 1) / 2 < r - 1) || (totalSeg - 1) / 2 < (maxSeg - 1) / 2) {
					temp.add(rLeft + rRight + 1);
				}
				temp.add(created);
				//System.out.println(temp);
				int curAns = created;
				for(int j : temp) {
					curAns = Math.min(curAns, j);
				}
				ans = Math.max(curAns, ans);
			}
			fout.append(ans).append("\n");
		}
		System.out.print(fout);
	}
}
